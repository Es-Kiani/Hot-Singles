
AVRASM ver. 2.1.30  C:\Users\Roshan\Desktop\Asal\Project-02\CVAVR (C)\Debug\List\ao.asm Wed Jan 17 20:35:14 2024

                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 002f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _addad:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f      	.DB  0x7F,0x6F
                 
                 __RESET:
00002f 94f8      	CLI
000030 27ee      	CLR  R30
000031 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000032 e0f1      	LDI  R31,1
000033 bffb      	OUT  GICR,R31
000034 bfeb      	OUT  GICR,R30
000035 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000036 e08d      	LDI  R24,(14-2)+1
000037 e0a2      	LDI  R26,2
000038 27bb      	CLR  R27
                 __CLEAR_REG:
000039 93ed      	ST   X+,R30
00003a 958a      	DEC  R24
00003b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003f 93ed      	ST   X+,R30
000040 9701      	SBIW R24,1
000041 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000042 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000043 bfed      	OUT  SPL,R30
000044 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000045 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000046 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000047 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000048 940c 0124 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * ao.c
                 ; *
                 ; * Created: 2024-01-18 03:39:42 PM
                 ; * Author: Asal Omrani
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <mega16.h>
                 ;#include <delay.h>
                 ;
                 ;#define UP PINB .0
                 ;#define DOWN PINB .1
                 ;#define ON 0
                 ;#define OFF 0
                 ;
                 ;flash unsigned char
                 ;    addad[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
                 ;
                 ;void show(char n1, char n2, char n3, char n4)
                 ; 0000 0015 {
                 
                 	.CSEG
                 _show:
                 ; .FSTART _show
                 ; 0000 0016     PORTC = 0x0E, PORTD = n1;
00004a 93aa      	ST   -Y,R26
                 ;	n1 -> Y+3
                 ;	n2 -> Y+2
                 ;	n3 -> Y+1
                 ;	n4 -> Y+0
00004b e0ee      	LDI  R30,LOW(14)
00004c bbe5      	OUT  0x15,R30
00004d 81eb      	LDD  R30,Y+3
00004e d126      	RCALL SUBOPT_0x0
                 ; 0000 0017     delay_ms(10);
                 ; 0000 0018 
                 ; 0000 0019     PORTC = 0x0D, PORTD = n2;
00004f e0ed      	LDI  R30,LOW(13)
000050 bbe5      	OUT  0x15,R30
000051 81ea      	LDD  R30,Y+2
000052 d122      	RCALL SUBOPT_0x0
                 ; 0000 001A     delay_ms(10);
                 ; 0000 001B 
                 ; 0000 001C     PORTC = 0x0B, PORTD = n3;
000053 e0eb      	LDI  R30,LOW(11)
000054 bbe5      	OUT  0x15,R30
000055 81e9      	LDD  R30,Y+1
000056 d11e      	RCALL SUBOPT_0x0
                 ; 0000 001D     delay_ms(10);
                 ; 0000 001E 
                 ; 0000 001F     PORTC = 0x07, PORTD = n4;
000057 e0e7      	LDI  R30,LOW(7)
000058 bbe5      	OUT  0x15,R30
000059 81e8      	LD   R30,Y
00005a d11a      	RCALL SUBOPT_0x0
                 ; 0000 0020     delay_ms(10);
                 ; 0000 0021 }
00005b 9624      	ADIW R28,4
00005c 9508      	RET
                 ; .FEND
                 ;
                 ;void counter()
                 ; 0000 0024 {
                 _counter:
                 ; .FSTART _counter
                 ; 0000 0025     int a, b, c, d;
                 ; 0000 0026     for (a = 9; a >= 0; a--)
00005d 9722      	SBIW R28,2
00005e 940e 01b8 	CALL __SAVELOCR6
                 ;	a -> R16,R17
                 ;	b -> R18,R19
                 ;	c -> R20,R21
                 ;	d -> Y+6
                +
000060 e009     +LDI R16 , LOW ( 9 )
000061 e010     +LDI R17 , HIGH ( 9 )
                 	__GETWRN 16,17,9
                 _0x4:
000062 2311      	TST  R17
000063 f162      	BRMI _0x5
                 ; 0000 0027         for (b = 9; b >= 0; b--)
                +
000064 e029     +LDI R18 , LOW ( 9 )
000065 e030     +LDI R19 , HIGH ( 9 )
                 	__GETWRN 18,19,9
                 _0x7:
000066 2333      	TST  R19
000067 f12a      	BRMI _0x8
                 ; 0000 0028             for (c = 9; c >= 0; c--)
                +
000068 e049     +LDI R20 , LOW ( 9 )
000069 e050     +LDI R21 , HIGH ( 9 )
                 	__GETWRN 20,21,9
                 _0xA:
00006a 2355      	TST  R21
00006b f0f2      	BRMI _0xB
                 ; 0000 0029                 for (d = 9; d >= 0; d--)
00006c e0e9      	LDI  R30,LOW(9)
00006d e0f0      	LDI  R31,HIGH(9)
00006e 83ee      	STD  Y+6,R30
00006f 83ff      	STD  Y+6+1,R31
                 _0xD:
000070 81af      	LDD  R26,Y+7
000071 23aa      	TST  R26
000072 f0a2      	BRMI _0xE
                 ; 0000 002A                 {
                 ; 0000 002B                     show(addad[a], addad[b], addad[c], addad[d]);
000073 01f8      	MOVW R30,R16
000074 d105      	RCALL SUBOPT_0x1
000075 01f9      	MOVW R30,R18
000076 d103      	RCALL SUBOPT_0x1
000077 01fa      	MOVW R30,R20
000078 d101      	RCALL SUBOPT_0x1
000079 85e9      	LDD  R30,Y+9
00007a 85fa      	LDD  R31,Y+9+1
00007b 5aec      	SUBI R30,LOW(-_addad*2)
00007c 4fff      	SBCI R31,HIGH(-_addad*2)
00007d 91a4      	LPM  R26,Z
00007e dfcb      	RCALL _show
                 ; 0000 002C                     if (PINA .3 == 1)
00007f 99cb      	SBIC 0x19,3
                 ; 0000 002D                         return;
000080 c00f      	RJMP _0x2000001
                 ; 0000 002E                 }
000081 81ee      	LDD  R30,Y+6
000082 81ff      	LDD  R31,Y+6+1
000083 9731      	SBIW R30,1
000084 83ee      	STD  Y+6,R30
000085 83ff      	STD  Y+6+1,R31
000086 cfe9      	RJMP _0xD
                 _0xE:
                +
000087 5041     +SUBI R20 , LOW ( 1 )
000088 4050     +SBCI R21 , HIGH ( 1 )
                 	__SUBWRN 20,21,1
000089 cfe0      	RJMP _0xA
                 _0xB:
                +
00008a 5021     +SUBI R18 , LOW ( 1 )
00008b 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
00008c cfd9      	RJMP _0x7
                 _0x8:
                +
00008d 5001     +SUBI R16 , LOW ( 1 )
00008e 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
00008f cfd2      	RJMP _0x4
                 _0x5:
                 ; 0000 002F }
                 _0x2000001:
000090 940e 01bf 	CALL __LOADLOCR6
000092 9628      	ADIW R28,8
000093 9508      	RET
                 ; .FEND
                 ;
                 ;void codemeli()
                 ; 0000 0032 {
                 _codemeli:
                 ; .FSTART _codemeli
                 ; 0000 0033     char i;
                 ; 0000 0034     for (i = 0; i < 20; i++)
000094 931a      	ST   -Y,R17
                 ;	i -> R17
000095 e010      	LDI  R17,LOW(0)
                 _0x11:
000096 3114      	CPI  R17,20
000097 f428      	BRSH _0x12
                 ; 0000 0035         show(OFF, OFF, OFF, addad[1]);
000098 d0e6      	RCALL SUBOPT_0x2
000099 e0e0      	LDI  R30,LOW(0)
00009a d0e8      	RCALL SUBOPT_0x3
00009b 5f1f      	SUBI R17,-1
00009c cff9      	RJMP _0x11
                 _0x12:
                 ; 0000 0036 for (i = 0; i < 20; i++)
00009d e010      	LDI  R17,LOW(0)
                 _0x14:
00009e 3114      	CPI  R17,20
00009f f430      	BRSH _0x15
                 ; 0000 0037         show(OFF, OFF, addad[1], addad[2]);
0000a0 d0de      	RCALL SUBOPT_0x2
0000a1 d0e6      	RCALL SUBOPT_0x4
0000a2 91a4      	LPM  R26,Z
0000a3 dfa6      	RCALL _show
0000a4 5f1f      	SUBI R17,-1
0000a5 cff8      	RJMP _0x14
                 _0x15:
                 ; 0000 0038 for (i = 0; i < 20; i++)
0000a6 e010      	LDI  R17,LOW(0)
                 _0x17:
0000a7 3114      	CPI  R17,20
0000a8 f440      	BRSH _0x18
                 ; 0000 0039         show(OFF, addad[1], addad[2], addad[7]);
0000a9 e0e0      	LDI  R30,LOW(0)
0000aa 93ea      	ST   -Y,R30
0000ab d0dc      	RCALL SUBOPT_0x4
0000ac d0e2      	RCALL SUBOPT_0x5
0000ad 91a4      	LPM  R26,Z
0000ae df9b      	RCALL _show
0000af 5f1f      	SUBI R17,-1
0000b0 cff6      	RJMP _0x17
                 _0x18:
                 ; 0000 003A for (i = 0; i < 20; i++)
0000b1 e010      	LDI  R17,LOW(0)
                 _0x1A:
0000b2 3114      	CPI  R17,20
0000b3 f438      	BRSH _0x1B
                 ; 0000 003B         show(addad[1], addad[2], addad[7], addad[3]);
0000b4 d0d3      	RCALL SUBOPT_0x4
0000b5 d0d9      	RCALL SUBOPT_0x5
0000b6 d0dd      	RCALL SUBOPT_0x6
0000b7 91a4      	LPM  R26,Z
0000b8 df91      	RCALL _show
0000b9 5f1f      	SUBI R17,-1
0000ba cff7      	RJMP _0x1A
                 _0x1B:
                 ; 0000 003C for (i = 0; i < 20; i++)
0000bb e010      	LDI  R17,LOW(0)
                 _0x1D:
0000bc 3114      	CPI  R17,20
0000bd f448      	BRSH _0x1E
                 ; 0000 003D         show(addad[2], addad[7], addad[3], addad[6]);
                +
0000be e5e6     +LDI R30 , LOW ( 2 * _addad + ( 2 ) )
0000bf e0f0     +LDI R31 , HIGH ( 2 * _addad + ( 2 ) )
                 	__POINTW1FN _addad,2
0000c0 d0ce      	RCALL SUBOPT_0x5
0000c1 d0d2      	RCALL SUBOPT_0x6
0000c2 d0d6      	RCALL SUBOPT_0x7
0000c3 91a4      	LPM  R26,Z
0000c4 df85      	RCALL _show
0000c5 5f1f      	SUBI R17,-1
0000c6 cff5      	RJMP _0x1D
                 _0x1E:
                 ; 0000 003E for (i = 0; i < 20; i++)
0000c7 e010      	LDI  R17,LOW(0)
                 _0x20:
0000c8 3114      	CPI  R17,20
0000c9 f448      	BRSH _0x21
                 ; 0000 003F         show(addad[7], addad[3], addad[6], addad[3]);
                +
0000ca e5eb     +LDI R30 , LOW ( 2 * _addad + ( 7 ) )
0000cb e0f0     +LDI R31 , HIGH ( 2 * _addad + ( 7 ) )
                 	__POINTW1FN _addad,7
0000cc d0c7      	RCALL SUBOPT_0x6
0000cd d0cb      	RCALL SUBOPT_0x7
0000ce d0c5      	RCALL SUBOPT_0x6
0000cf 91a4      	LPM  R26,Z
0000d0 df79      	RCALL _show
0000d1 5f1f      	SUBI R17,-1
0000d2 cff5      	RJMP _0x20
                 _0x21:
                 ; 0000 0040 for (i = 0; i < 20; i++)
0000d3 e010      	LDI  R17,LOW(0)
                 _0x23:
0000d4 3114      	CPI  R17,20
0000d5 f448      	BRSH _0x24
                 ; 0000 0041         show(addad[3], addad[6], addad[3], addad[9]);
                +
0000d6 e5e7     +LDI R30 , LOW ( 2 * _addad + ( 3 ) )
0000d7 e0f0     +LDI R31 , HIGH ( 2 * _addad + ( 3 ) )
                 	__POINTW1FN _addad,3
0000d8 d0c0      	RCALL SUBOPT_0x7
0000d9 d0ba      	RCALL SUBOPT_0x6
0000da d0c3      	RCALL SUBOPT_0x8
0000db 91a4      	LPM  R26,Z
0000dc df6d      	RCALL _show
0000dd 5f1f      	SUBI R17,-1
0000de cff5      	RJMP _0x23
                 _0x24:
                 ; 0000 0042 for (i = 0; i < 20; i++)
0000df e010      	LDI  R17,LOW(0)
                 _0x26:
0000e0 3114      	CPI  R17,20
0000e1 f448      	BRSH _0x27
                 ; 0000 0043         show(addad[6], addad[3], addad[9], addad[7]);
                +
0000e2 e5ea     +LDI R30 , LOW ( 2 * _addad + ( 6 ) )
0000e3 e0f0     +LDI R31 , HIGH ( 2 * _addad + ( 6 ) )
                 	__POINTW1FN _addad,6
0000e4 d0af      	RCALL SUBOPT_0x6
0000e5 d0b8      	RCALL SUBOPT_0x8
0000e6 d0a8      	RCALL SUBOPT_0x5
0000e7 91a4      	LPM  R26,Z
0000e8 df61      	RCALL _show
0000e9 5f1f      	SUBI R17,-1
0000ea cff5      	RJMP _0x26
                 _0x27:
                 ; 0000 0044 for (i = 0; i < 20; i++)
0000eb e010      	LDI  R17,LOW(0)
                 _0x29:
0000ec 3114      	CPI  R17,20
0000ed f448      	BRSH _0x2A
                 ; 0000 0045         show(addad[3], addad[9], addad[7], addad[3]);
                +
0000ee e5e7     +LDI R30 , LOW ( 2 * _addad + ( 3 ) )
0000ef e0f0     +LDI R31 , HIGH ( 2 * _addad + ( 3 ) )
                 	__POINTW1FN _addad,3
0000f0 d0ad      	RCALL SUBOPT_0x8
0000f1 d09d      	RCALL SUBOPT_0x5
0000f2 d0a1      	RCALL SUBOPT_0x6
0000f3 91a4      	LPM  R26,Z
0000f4 df55      	RCALL _show
0000f5 5f1f      	SUBI R17,-1
0000f6 cff5      	RJMP _0x29
                 _0x2A:
                 ; 0000 0046 for (i = 0; i < 20; i++)
0000f7 e010      	LDI  R17,LOW(0)
                 _0x2C:
0000f8 3114      	CPI  R17,20
0000f9 f440      	BRSH _0x2D
                 ; 0000 0047         show(addad[9], addad[7], addad[3], addad[1]);
                +
0000fa e5ed     +LDI R30 , LOW ( 2 * _addad + ( 9 ) )
0000fb e0f0     +LDI R31 , HIGH ( 2 * _addad + ( 9 ) )
                 	__POINTW1FN _addad,9
0000fc d092      	RCALL SUBOPT_0x5
0000fd d096      	RCALL SUBOPT_0x6
0000fe 91e4      	LPM  R30,Z
0000ff d083      	RCALL SUBOPT_0x3
000100 5f1f      	SUBI R17,-1
000101 cff6      	RJMP _0x2C
                 _0x2D:
                 ; 0000 0048 for (i = 0; i < 20; i++)
000102 e010      	LDI  R17,LOW(0)
                 _0x2F:
000103 3114      	CPI  R17,20
000104 f440      	BRSH _0x30
                 ; 0000 0049         show(addad[7], addad[3], addad[1], OFF);
                +
000105 e5eb     +LDI R30 , LOW ( 2 * _addad + ( 7 ) )
000106 e0f0     +LDI R31 , HIGH ( 2 * _addad + ( 7 ) )
                 	__POINTW1FN _addad,7
000107 d08c      	RCALL SUBOPT_0x6
000108 d09a      	RCALL SUBOPT_0x9
000109 e0a0      	LDI  R26,LOW(0)
00010a df3f      	RCALL _show
00010b 5f1f      	SUBI R17,-1
00010c cff6      	RJMP _0x2F
                 _0x30:
                 ; 0000 004A for (i = 0; i < 20; i++)
00010d e010      	LDI  R17,LOW(0)
                 _0x32:
00010e 3114      	CPI  R17,20
00010f f430      	BRSH _0x33
                 ; 0000 004B         show(addad[3], addad[1], OFF, OFF);
                +
000110 e5e7     +LDI R30 , LOW ( 2 * _addad + ( 3 ) )
000111 e0f0     +LDI R31 , HIGH ( 2 * _addad + ( 3 ) )
                 	__POINTW1FN _addad,3
000112 d090      	RCALL SUBOPT_0x9
000113 d096      	RCALL SUBOPT_0xA
000114 5f1f      	SUBI R17,-1
000115 cff8      	RJMP _0x32
                 _0x33:
                 ; 0000 004C for (i = 0; i < 20; i++)
000116 e010      	LDI  R17,LOW(0)
                 _0x35:
000117 3114      	CPI  R17,20
000118 f448      	BRSH _0x36
                 ; 0000 004D         show(addad[1], OFF, OFF, OFF);
                +
000119 e5e5     +LDI R30 , LOW ( 2 * _addad + ( 1 ) )
00011a e0f0     +LDI R31 , HIGH ( 2 * _addad + ( 1 ) )
                 	__POINTW1FN _addad,1
00011b 91e4      	LPM  R30,Z
00011c 93ea      	ST   -Y,R30
00011d d061      	RCALL SUBOPT_0x2
00011e e0a0      	LDI  R26,LOW(0)
00011f df2a      	RCALL _show
000120 5f1f      	SUBI R17,-1
000121 cff5      	RJMP _0x35
                 _0x36:
                 ; 0000 004E }
000122 9119      	LD   R17,Y+
000123 9508      	RET
                 ; .FEND
                 ;
                 ;void main()
                 ; 0000 0051 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0052     char a = 0, b = 0;
                 ; 0000 0053     DDRA = 0X00, DDRB = 0X00, DDRC = 0Xff, DDRD = 0Xff;
                 ;	a -> R17
                 ;	b -> R16
000124 e010      	LDI  R17,0
000125 e000      	LDI  R16,0
000126 e0e0      	LDI  R30,LOW(0)
000127 bbea      	OUT  0x1A,R30
000128 bbe7      	OUT  0x17,R30
000129 efef      	LDI  R30,LOW(255)
00012a bbe4      	OUT  0x14,R30
00012b bbe1      	OUT  0x11,R30
                 ; 0000 0054     PORTA = 0Xff, PORTB = 0Xff, PORTC = 0X00, PORTD = 0X00;
00012c bbeb      	OUT  0x1B,R30
00012d bbe8      	OUT  0x18,R30
00012e e0e0      	LDI  R30,LOW(0)
00012f bbe5      	OUT  0x15,R30
000130 bbe2      	OUT  0x12,R30
                 ; 0000 0055 
                 ; 0000 0056     while (1)
                 _0x37:
                 ; 0000 0057     {
                 ; 0000 0058         if (PINA .0 == ON)
000131 99c8      	SBIC 0x19,0
000132 c028      	RJMP _0x3A
                 ; 0000 0059         {
                 ; 0000 005A             while (PINA .0 == ON)
                 _0x3B:
000133 99c8      	SBIC 0x19,0
000134 c025      	RJMP _0x3D
                 ; 0000 005B             {
                 ; 0000 005C                 show(addad[a], addad[b], OFF, OFF);
000135 2fe1      	MOV  R30,R17
000136 e0f0      	LDI  R31,0
000137 d042      	RCALL SUBOPT_0x1
000138 2fe0      	MOV  R30,R16
000139 e0f0      	LDI  R31,0
00013a d03f      	RCALL SUBOPT_0x1
00013b d06e      	RCALL SUBOPT_0xA
                 ; 0000 005D                 if (UP == ON)
00013c 99b0      	SBIC 0x16,0
00013d c00b      	RJMP _0x3E
                 ; 0000 005E                 {
                 ; 0000 005F                     if (b == 9)
00013e 3009      	CPI  R16,9
00013f f439      	BRNE _0x3F
                 ; 0000 0060                     {
                 ; 0000 0061                         b = 0;
000140 e000      	LDI  R16,LOW(0)
                 ; 0000 0062                         if (a == 9)
000141 3019      	CPI  R17,9
000142 f411      	BRNE _0x40
                 ; 0000 0063                             a = 0;
000143 e010      	LDI  R17,LOW(0)
                 ; 0000 0064                         else
000144 c001      	RJMP _0x41
                 _0x40:
                 ; 0000 0065                             a++;
000145 5f1f      	SUBI R17,-1
                 ; 0000 0066                     }
                 _0x41:
                 ; 0000 0067                     else
000146 c001      	RJMP _0x42
                 _0x3F:
                 ; 0000 0068                         b++;
000147 5f0f      	SUBI R16,-1
                 ; 0000 0069                     delay_ms(300);
                 _0x42:
000148 c00c      	RJMP _0x54
                 ; 0000 006A                 }
                 ; 0000 006B                 else if (DOWN == ON)
                 _0x3E:
000149 99b1      	SBIC 0x16,1
00014a c00e      	RJMP _0x44
                 ; 0000 006C                 {
                 ; 0000 006D                     if (b == 0)
00014b 3000      	CPI  R16,0
00014c f439      	BRNE _0x45
                 ; 0000 006E                     {
                 ; 0000 006F                         b = 9;
00014d e009      	LDI  R16,LOW(9)
                 ; 0000 0070                         if (a == 0)
00014e 3010      	CPI  R17,0
00014f f411      	BRNE _0x46
                 ; 0000 0071                             a = 9;
000150 e019      	LDI  R17,LOW(9)
                 ; 0000 0072                         else
000151 c001      	RJMP _0x47
                 _0x46:
                 ; 0000 0073                             a--;
000152 5011      	SUBI R17,1
                 ; 0000 0074                     }
                 _0x47:
                 ; 0000 0075                     else
000153 c001      	RJMP _0x48
                 _0x45:
                 ; 0000 0076                         b--;
000154 5001      	SUBI R16,1
                 ; 0000 0077                     delay_ms(300);
                 _0x48:
                 _0x54:
000155 e2ac      	LDI  R26,LOW(300)
000156 e0b1      	LDI  R27,HIGH(300)
000157 940e 01ae 	CALL _delay_ms
                 ; 0000 0078                 }
                 ; 0000 0079             }
                 _0x44:
000159 cfd9      	RJMP _0x3B
                 _0x3D:
                 ; 0000 007A         }
                 ; 0000 007B         else if (PINA .2 == ON)
00015a c018      	RJMP _0x49
                 _0x3A:
00015b 99ca      	SBIC 0x19,2
00015c c00c      	RJMP _0x4A
                 ; 0000 007C         {
                 ; 0000 007D             while (PINA .2 == ON)
                 _0x4B:
00015d 99ca      	SBIC 0x19,2
00015e c009      	RJMP _0x4D
                 ; 0000 007E                 show(0x71, 0x77, 0x30, 0x38);
00015f e7e1      	LDI  R30,LOW(113)
000160 93ea      	ST   -Y,R30
000161 e7e7      	LDI  R30,LOW(119)
000162 93ea      	ST   -Y,R30
000163 e3e0      	LDI  R30,LOW(48)
000164 93ea      	ST   -Y,R30
000165 e3a8      	LDI  R26,LOW(56)
000166 dee3      	RCALL _show
000167 cff5      	RJMP _0x4B
                 _0x4D:
                 ; 0000 007F }
                 ; 0000 0080         else if (PINA .3 == ON)
000168 c00a      	RJMP _0x4E
                 _0x4A:
000169 99cb      	SBIC 0x19,3
00016a c002      	RJMP _0x4F
                 ; 0000 0081         {
                 ; 0000 0082             counter();
00016b def1      	RCALL _counter
                 ; 0000 0083         }
                 ; 0000 0084         else if (PINA .4 == ON)
00016c c006      	RJMP _0x50
                 _0x4F:
00016d 99cc      	SBIC 0x19,4
00016e c002      	RJMP _0x51
                 ; 0000 0085         {
                 ; 0000 0086             codemeli();
00016f df24      	RCALL _codemeli
                 ; 0000 0087         }
                 ; 0000 0088         else
000170 c002      	RJMP _0x52
                 _0x51:
                 ; 0000 0089         {
                 ; 0000 008A             show(0, 0, 0, 0);
000171 d00d      	RCALL SUBOPT_0x2
000172 d037      	RCALL SUBOPT_0xA
                 ; 0000 008B         }
                 _0x52:
                 _0x50:
                 _0x4E:
                 _0x49:
                 ; 0000 008C     }
000173 cfbd      	RJMP _0x37
                 ; 0000 008D }
                 _0x53:
000174 cfff      	RJMP _0x53
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
000175 bbe2      	OUT  0x12,R30
000176 e0aa      	LDI  R26,LOW(10)
000177 e0b0      	LDI  R27,0
000178 940c 01ae 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
00017a 5aec      	SUBI R30,LOW(-_addad*2)
00017b 4fff      	SBCI R31,HIGH(-_addad*2)
00017c 91e4      	LPM  R30,Z
00017d 93ea      	ST   -Y,R30
00017e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
00017f e0e0      	LDI  R30,LOW(0)
000180 93ea      	ST   -Y,R30
000181 93ea      	ST   -Y,R30
000182 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000183 93ea      	ST   -Y,R30
                +
000184 e5e5     +LDI R30 , LOW ( 2 * _addad + ( 1 ) )
000185 e0f0     +LDI R31 , HIGH ( 2 * _addad + ( 1 ) )
                 	__POINTW1FN _addad,1
000186 91a4      	LPM  R26,Z
000187 cec2      	RJMP _show
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
                +
000188 e5e5     +LDI R30 , LOW ( 2 * _addad + ( 1 ) )
000189 e0f0     +LDI R31 , HIGH ( 2 * _addad + ( 1 ) )
                 	__POINTW1FN _addad,1
00018a 91e4      	LPM  R30,Z
00018b 93ea      	ST   -Y,R30
                +
00018c e5e6     +LDI R30 , LOW ( 2 * _addad + ( 2 ) )
00018d e0f0     +LDI R31 , HIGH ( 2 * _addad + ( 2 ) )
                 	__POINTW1FN _addad,2
00018e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
00018f 91e4      	LPM  R30,Z
000190 93ea      	ST   -Y,R30
                +
000191 e5eb     +LDI R30 , LOW ( 2 * _addad + ( 7 ) )
000192 e0f0     +LDI R31 , HIGH ( 2 * _addad + ( 7 ) )
                 	__POINTW1FN _addad,7
000193 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
000194 91e4      	LPM  R30,Z
000195 93ea      	ST   -Y,R30
                +
000196 e5e7     +LDI R30 , LOW ( 2 * _addad + ( 3 ) )
000197 e0f0     +LDI R31 , HIGH ( 2 * _addad + ( 3 ) )
                 	__POINTW1FN _addad,3
000198 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000199 91e4      	LPM  R30,Z
00019a 93ea      	ST   -Y,R30
                +
00019b e5ea     +LDI R30 , LOW ( 2 * _addad + ( 6 ) )
00019c e0f0     +LDI R31 , HIGH ( 2 * _addad + ( 6 ) )
                 	__POINTW1FN _addad,6
00019d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
00019e 91e4      	LPM  R30,Z
00019f 93ea      	ST   -Y,R30
                +
0001a0 e5ed     +LDI R30 , LOW ( 2 * _addad + ( 9 ) )
0001a1 e0f0     +LDI R31 , HIGH ( 2 * _addad + ( 9 ) )
                 	__POINTW1FN _addad,9
0001a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0001a3 91e4      	LPM  R30,Z
0001a4 93ea      	ST   -Y,R30
                +
0001a5 e5e5     +LDI R30 , LOW ( 2 * _addad + ( 1 ) )
0001a6 e0f0     +LDI R31 , HIGH ( 2 * _addad + ( 1 ) )
                 	__POINTW1FN _addad,1
0001a7 91e4      	LPM  R30,Z
0001a8 93ea      	ST   -Y,R30
0001a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
0001aa e0e0      	LDI  R30,LOW(0)
0001ab 93ea      	ST   -Y,R30
0001ac e0a0      	LDI  R26,LOW(0)
0001ad ce9c      	RJMP _show
                 
                 
                 	.CSEG
                 _delay_ms:
0001ae 9610      	adiw r26,0
0001af f039      	breq __delay_ms1
                 __delay_ms0:
0001b0 95a8      	wdr
                +
0001b1 ed80     +LDI R24 , LOW ( 0x7D0 )
0001b2 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001b3 9701     +SBIW R24 , 1
0001b4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001b5 9711      	sbiw r26,1
0001b6 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001b7 9508      	ret
                 
                 __SAVELOCR6:
0001b8 935a      	ST   -Y,R21
                 __SAVELOCR5:
0001b9 934a      	ST   -Y,R20
                 __SAVELOCR4:
0001ba 933a      	ST   -Y,R19
                 __SAVELOCR3:
0001bb 932a      	ST   -Y,R18
                 __SAVELOCR2:
0001bc 931a      	ST   -Y,R17
0001bd 930a      	ST   -Y,R16
0001be 9508      	RET
                 
                 __LOADLOCR6:
0001bf 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0001c0 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0001c1 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0001c2 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0001c3 8119      	LDD  R17,Y+1
0001c4 8108      	LD   R16,Y
0001c5 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  13 r17:  54 r18:   5 r19:   5 r20:   5 r21:   5 r22:   0 r23:   0 
r24:   6 r25:   2 r26:  23 r27:   3 r28:   4 r29:   1 r30:  98 r31:  28 
x  :   2 y  :  45 z  :  20 
Registers used: 17 out of 35 (48.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   3 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   1 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   4 brne  :   8 brpl  :   0 brsh  :  13 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   3 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   0 cpc   :   0 cpi   :  17 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  23 ld    :   3 ldd   :  13 ldi   :  97 
lds   :   0 lpm   :  40 lsl   :   0 lsr   :   0 mov   :   2 movw  :   3 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  19 pop   :   0 push  :   0 rcall :  58 ret   :  14 
reti  :   0 rjmp  :  41 rol   :   0 ror   :   0 sbc   :   0 sbci  :   5 
sbi   :   0 sbic  :   9 sbis  :   0 sbiw  :   5 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  27 std   :   4 sts   :   0 sub   :   0 subi  :  22 swap  :   0 
tst   :   4 wdr   :   1 
Instructions used: 29 out of 116 (25.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00038c    898     10    908   16384   5.5%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
