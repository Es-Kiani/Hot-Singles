
AVRASM ver. 2.1.30  F:\University\T7\Micro Lab\Project-02\CVAVR (C)\Debug\List\Project-02.asm Mon Dec 25 04:12:00 2023

                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0032 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _DIGIT:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f      	.DB  0x7F,0x6F
                 _SEG7_DNo:
00002f 0e00
000030 0b0d
F:\University\T7\Micro Lab\Project-02\CVAVR (C)\Debug\List\Project-02.asm(1120): warning: .cseg .db misalignment - padding zero byte
000031 0007      	.DB  0x0,0xE,0xD,0xB,0x7
                 
                 __RESET:
000032 94f8      	CLI
000033 27ee      	CLR  R30
000034 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000035 e0f1      	LDI  R31,1
000036 bffb      	OUT  GICR,R31
000037 bfeb      	OUT  GICR,R30
000038 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000039 e08d      	LDI  R24,(14-2)+1
00003a e0a2      	LDI  R26,2
00003b 27bb      	CLR  R27
                 __CLEAR_REG:
00003c 93ed      	ST   X+,R30
00003d 958a      	DEC  R24
00003e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000040 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000041 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000042 93ed      	ST   X+,R30
000043 9701      	SBIW R24,1
000044 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000045 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000046 bfed      	OUT  SPL,R30
000047 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000048 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000049 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00004a e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004b 940c 004d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * Project-02.c
                 ; *
                 ; * Created: 2023-12-20 11:28:01 PM
                 ; * Author: Esfandiar Kiani
                 ; */
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;flash unsigned char
                 ;    // 7Seg Codes for 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
                 ;    DIGIT[10] = {0b00111111, 0b00000110, 0b01011011, 0b01001111, 0b01100110, 0b01101101,
                 ;                 0b01111101, 0b00000111, 0b01111111, 0b01101111};
                 ;
                 ;flash unsigned char
                 ;    SEG7_DNo[5] = {0X00, 0b00001110, 0b00001101, 0b00001011, 0b00000111};
                 ;
                 ;void main(void)
                 ; 0000 0014 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0015     char MSD = 0, LSD = 0;
                 ; 0000 0016 
                 ; 0000 0017     DDRA = 0X00, PORTA = 0Xff;
                 ;	MSD -> R17
                 ;	LSD -> R16
00004d e010      	LDI  R17,0
00004e e000      	LDI  R16,0
00004f e0e0      	LDI  R30,LOW(0)
000050 bbea      	OUT  0x1A,R30
000051 efef      	LDI  R30,LOW(255)
000052 bbeb      	OUT  0x1B,R30
                 ; 0000 0018     DDRC = 0Xff, PORTC = 0X00;
000053 bbe4      	OUT  0x14,R30
000054 e0e0      	LDI  R30,LOW(0)
000055 bbe5      	OUT  0x15,R30
                 ; 0000 0019     DDRD = 0Xff, PORTD = 0X00;
000056 efef      	LDI  R30,LOW(255)
000057 bbe1      	OUT  0x11,R30
000058 e0e0      	LDI  R30,LOW(0)
000059 bbe2      	OUT  0x12,R30
                 ; 0000 001A 
                 ; 0000 001B     while (1)
                 _0x3:
                 ; 0000 001C     {
                 ; 0000 001D         PORTC = 0Xff;
00005a efef      	LDI  R30,LOW(255)
00005b bbe5      	OUT  0x15,R30
                 ; 0000 001E 
                 ; 0000 001F         //*     Manual Counter      -   Done
                 ; 0000 0020         while (PINA .0 == 0)
                 _0x6:
00005c 99c8      	SBIC 0x19,0
00005d c024      	RJMP _0x8
                 ; 0000 0021         {
                 ; 0000 0022             PORTC = SEG7_DNo[2];
00005e d17a      	RCALL SUBOPT_0x0
                 ; 0000 0023             PORTD = DIGIT[MSD];
00005f 2fe1      	MOV  R30,R17
000060 d17d      	RCALL SUBOPT_0x1
                 ; 0000 0024             delay_ms(1);
                 ; 0000 0025 
                 ; 0000 0026             PORTC = SEG7_DNo[3];
000061 d185      	RCALL SUBOPT_0x2
                 ; 0000 0027             PORTD = DIGIT[LSD];
000062 2fe0      	MOV  R30,R16
000063 d17a      	RCALL SUBOPT_0x1
                 ; 0000 0028             delay_ms(1);
                 ; 0000 0029 
                 ; 0000 002A             if (PINA .6 == 0)
000064 99ce      	SBIC 0x19,6
000065 c00b      	RJMP _0x9
                 ; 0000 002B             {
                 ; 0000 002C                 if (LSD == 9)
000066 3009      	CPI  R16,9
000067 f439      	BRNE _0xA
                 ; 0000 002D                 {
                 ; 0000 002E                     LSD = 0;
000068 e000      	LDI  R16,LOW(0)
                 ; 0000 002F                     if (MSD == 9)
000069 3019      	CPI  R17,9
00006a f411      	BRNE _0xB
                 ; 0000 0030                         MSD = 0;
00006b e010      	LDI  R17,LOW(0)
                 ; 0000 0031                     else
00006c c001      	RJMP _0xC
                 _0xB:
                 ; 0000 0032                         MSD++;
00006d 5f1f      	SUBI R17,-1
                 ; 0000 0033                 }
                 _0xC:
                 ; 0000 0034                 else
00006e c001      	RJMP _0xD
                 _0xA:
                 ; 0000 0035                     LSD++;
00006f 5f0f      	SUBI R16,-1
                 ; 0000 0036                 delay_ms(200);
                 _0xD:
000070 c00c      	RJMP _0x66
                 ; 0000 0037             }
                 ; 0000 0038             else if (PINA .7 == 0)
                 _0x9:
000071 99cf      	SBIC 0x19,7
000072 c00e      	RJMP _0xF
                 ; 0000 0039             {
                 ; 0000 003A                 if (LSD == 0)
000073 3000      	CPI  R16,0
000074 f439      	BRNE _0x10
                 ; 0000 003B                 {
                 ; 0000 003C                     LSD = 9;
000075 e009      	LDI  R16,LOW(9)
                 ; 0000 003D                     if (MSD == 0)
000076 3010      	CPI  R17,0
000077 f411      	BRNE _0x11
                 ; 0000 003E                         MSD = 9;
000078 e019      	LDI  R17,LOW(9)
                 ; 0000 003F                     else
000079 c001      	RJMP _0x12
                 _0x11:
                 ; 0000 0040                         MSD--;
00007a 5011      	SUBI R17,1
                 ; 0000 0041                 }
                 _0x12:
                 ; 0000 0042                 else
00007b c001      	RJMP _0x13
                 _0x10:
                 ; 0000 0043                     LSD--;
00007c 5001      	SUBI R16,1
                 ; 0000 0044                 delay_ms(200);
                 _0x13:
                 _0x66:
00007d eca8      	LDI  R26,LOW(200)
00007e e0b0      	LDI  R27,0
00007f 940e 0243 	CALL _delay_ms
                 ; 0000 0045             }
                 ; 0000 0046         }
                 _0xF:
000081 cfda      	RJMP _0x6
                 _0x8:
                 ; 0000 0047 
                 ; 0000 0048         //*     FAIL                -   Done
                 ; 0000 0049         while (PINA .1 == 0)
                 _0x14:
000082 99c9      	SBIC 0x19,1
000083 c00d      	RJMP _0x16
                 ; 0000 004A         {
                 ; 0000 004B             PORTC = SEG7_DNo[1];
000084 d167      	RCALL SUBOPT_0x3
                 ; 0000 004C             PORTD = 0b01110001; // F
000085 e7e1      	LDI  R30,LOW(113)
000086 d16a      	RCALL SUBOPT_0x4
                 ; 0000 004D             delay_ms(2);
                 ; 0000 004E 
                 ; 0000 004F             PORTC = SEG7_DNo[2];
000087 d151      	RCALL SUBOPT_0x0
                 ; 0000 0050             PORTD = 0b01110111; // A
000088 e7e7      	LDI  R30,LOW(119)
000089 d167      	RCALL SUBOPT_0x4
                 ; 0000 0051             delay_ms(2);
                 ; 0000 0052 
                 ; 0000 0053             PORTC = SEG7_DNo[3];
00008a d15c      	RCALL SUBOPT_0x2
                 ; 0000 0054             PORTD = 0b00110000; // I
00008b e3e0      	LDI  R30,LOW(48)
00008c d164      	RCALL SUBOPT_0x4
                 ; 0000 0055             delay_ms(2);
                 ; 0000 0056 
                 ; 0000 0057             PORTC = SEG7_DNo[4];
00008d d168      	RCALL SUBOPT_0x5
                 ; 0000 0058             PORTD = 0b00111000; // L
00008e e3e8      	LDI  R30,LOW(56)
00008f d161      	RCALL SUBOPT_0x4
                 ; 0000 0059             delay_ms(2);
                 ; 0000 005A         }
000090 cff1      	RJMP _0x14
                 _0x16:
                 ; 0000 005B 
                 ; 0000 005C         //*     Automatic Counter   -   Done
                 ; 0000 005D         while (PINA .2 == 0)
                 _0x17:
000091 99ca      	SBIC 0x19,2
000092 c060      	RJMP _0x19
                 ; 0000 005E         {
                 ; 0000 005F             int Kilo, Hundred, Ten, One, Show;
                 ; 0000 0060 
                 ; 0000 0061             for (Kilo = 9; Kilo >= 0; Kilo--)
000093 972a      	SBIW R28,10
                 ;	Kilo -> Y+8
                 ;	Hundred -> Y+6
                 ;	Ten -> Y+4
                 ;	One -> Y+2
                 ;	Show -> Y+0
000094 e0e9      	LDI  R30,LOW(9)
000095 e0f0      	LDI  R31,HIGH(9)
000096 87e8      	STD  Y+8,R30
000097 87f9      	STD  Y+8+1,R31
                 _0x1B:
000098 85a9      	LDD  R26,Y+9
000099 23aa      	TST  R26
00009a f40a      	BRPL PC+2
00009b c055      	RJMP _0x1C
                 ; 0000 0062             {
                 ; 0000 0063                 for (Hundred = 9; Hundred >= 0; Hundred--)
00009c e0e9      	LDI  R30,LOW(9)
00009d e0f0      	LDI  R31,HIGH(9)
00009e 83ee      	STD  Y+6,R30
00009f 83ff      	STD  Y+6+1,R31
                 _0x1E:
0000a0 81af      	LDD  R26,Y+7
0000a1 23aa      	TST  R26
0000a2 f40a      	BRPL PC+2
0000a3 c045      	RJMP _0x1F
                 ; 0000 0064                 {
                 ; 0000 0065                     for (Ten = 9; Ten >= 0; Ten--)
0000a4 e0e9      	LDI  R30,LOW(9)
0000a5 e0f0      	LDI  R31,HIGH(9)
0000a6 83ec      	STD  Y+4,R30
0000a7 83fd      	STD  Y+4+1,R31
                 _0x21:
0000a8 81ad      	LDD  R26,Y+5
0000a9 23aa      	TST  R26
0000aa f1b2      	BRMI _0x22
                 ; 0000 0066                     {
                 ; 0000 0067                         for (One = 9; One >= 0; One--)
0000ab e0e9      	LDI  R30,LOW(9)
0000ac e0f0      	LDI  R31,HIGH(9)
0000ad 83ea      	STD  Y+2,R30
0000ae 83fb      	STD  Y+2+1,R31
                 _0x24:
0000af 81ab      	LDD  R26,Y+3
0000b0 23aa      	TST  R26
0000b1 f13a      	BRMI _0x25
                 ; 0000 0068                         {
                 ; 0000 0069                             for (Show = 0; Show < 15; Show++)
0000b2 e0e0      	LDI  R30,LOW(0)
0000b3 83e8      	STD  Y+0,R30
0000b4 83e9      	STD  Y+0+1,R30
                 _0x27:
0000b5 81a8      	LD   R26,Y
0000b6 81b9      	LDD  R27,Y+1
0000b7 971f      	SBIW R26,15
0000b8 f4c4      	BRGE _0x28
                 ; 0000 006A                             {
                 ; 0000 006B                                 PORTC = SEG7_DNo[1];
0000b9 d132      	RCALL SUBOPT_0x3
                 ; 0000 006C                                 PORTD = DIGIT[Kilo];
0000ba 85e8      	LDD  R30,Y+8
0000bb 85f9      	LDD  R31,Y+8+1
0000bc d13e      	RCALL SUBOPT_0x6
                 ; 0000 006D                                 delay_ms(3);
                 ; 0000 006E 
                 ; 0000 006F                                 PORTC = SEG7_DNo[2];
0000bd d11b      	RCALL SUBOPT_0x0
                 ; 0000 0070                                 PORTD = DIGIT[Hundred];
0000be 81ee      	LDD  R30,Y+6
0000bf 81ff      	LDD  R31,Y+6+1
0000c0 d13a      	RCALL SUBOPT_0x6
                 ; 0000 0071                                 delay_ms(3);
                 ; 0000 0072 
                 ; 0000 0073                                 PORTC = SEG7_DNo[3];
0000c1 d125      	RCALL SUBOPT_0x2
                 ; 0000 0074                                 PORTD = DIGIT[Ten];
0000c2 81ec      	LDD  R30,Y+4
0000c3 81fd      	LDD  R31,Y+4+1
0000c4 d136      	RCALL SUBOPT_0x6
                 ; 0000 0075                                 delay_ms(3);
                 ; 0000 0076 
                 ; 0000 0077                                 PORTC = SEG7_DNo[4];
0000c5 d130      	RCALL SUBOPT_0x5
                 ; 0000 0078                                 PORTD = DIGIT[One];
0000c6 81ea      	LDD  R30,Y+2
0000c7 81fb      	LDD  R31,Y+2+1
0000c8 d132      	RCALL SUBOPT_0x6
                 ; 0000 0079                                 delay_ms(3);
                 ; 0000 007A 
                 ; 0000 007B                                 if (PINA.2)
0000c9 99ca      	SBIC 0x19,2
                 ; 0000 007C                                     break;
0000ca c006      	RJMP _0x28
                 ; 0000 007D                             }
0000cb 81e8      	LD   R30,Y
0000cc 81f9      	LDD  R31,Y+1
0000cd 9631      	ADIW R30,1
0000ce 83e8      	ST   Y,R30
0000cf 83f9      	STD  Y+1,R31
0000d0 cfe4      	RJMP _0x27
                 _0x28:
                 ; 0000 007E                             if (PINA.2)
0000d1 99ca      	SBIC 0x19,2
                 ; 0000 007F                                 break;
0000d2 c006      	RJMP _0x25
                 ; 0000 0080                         }
0000d3 81ea      	LDD  R30,Y+2
0000d4 81fb      	LDD  R31,Y+2+1
0000d5 9731      	SBIW R30,1
0000d6 83ea      	STD  Y+2,R30
0000d7 83fb      	STD  Y+2+1,R31
0000d8 cfd6      	RJMP _0x24
                 _0x25:
                 ; 0000 0081                         if (PINA.2)
0000d9 99ca      	SBIC 0x19,2
                 ; 0000 0082                             break;
0000da c006      	RJMP _0x22
                 ; 0000 0083                     }
0000db 81ec      	LDD  R30,Y+4
0000dc 81fd      	LDD  R31,Y+4+1
0000dd 9731      	SBIW R30,1
0000de 83ec      	STD  Y+4,R30
0000df 83fd      	STD  Y+4+1,R31
0000e0 cfc7      	RJMP _0x21
                 _0x22:
                 ; 0000 0084                     if (PINA.2)
0000e1 99ca      	SBIC 0x19,2
                 ; 0000 0085                         break;
0000e2 c006      	RJMP _0x1F
                 ; 0000 0086                 }
0000e3 81ee      	LDD  R30,Y+6
0000e4 81ff      	LDD  R31,Y+6+1
0000e5 9731      	SBIW R30,1
0000e6 83ee      	STD  Y+6,R30
0000e7 83ff      	STD  Y+6+1,R31
0000e8 cfb7      	RJMP _0x1E
                 _0x1F:
                 ; 0000 0087                 if (PINA.2)
0000e9 99ca      	SBIC 0x19,2
                 ; 0000 0088                     break;
0000ea c006      	RJMP _0x1C
                 ; 0000 0089             }
0000eb 85e8      	LDD  R30,Y+8
0000ec 85f9      	LDD  R31,Y+8+1
0000ed 9731      	SBIW R30,1
0000ee 87e8      	STD  Y+8,R30
0000ef 87f9      	STD  Y+8+1,R31
0000f0 cfa7      	RJMP _0x1B
                 _0x1C:
                 ; 0000 008A         }
0000f1 962a      	ADIW R28,10
0000f2 cf9e      	RJMP _0x17
                 _0x19:
                 ; 0000 008B 
                 ; 0000 008C         //*     SSN                 -   Done
                 ; 0000 008D         while (PINA .3 == 0)
                 _0x2E:
0000f3 99cb      	SBIC 0x19,3
0000f4 c0e2      	RJMP _0x30
                 ; 0000 008E         {
                 ; 0000 008F             char i;
                 ; 0000 0090 
                 ; 0000 0091             for (i = 0; i < 55; i++)
0000f5 9721      	SBIW R28,1
                 ;	i -> Y+0
0000f6 e0e0      	LDI  R30,LOW(0)
0000f7 83e8      	ST   Y,R30
                 _0x32:
0000f8 81a8      	LD   R26,Y
0000f9 33a7      	CPI  R26,LOW(0x37)
0000fa f440      	BRSH _0x33
                 ; 0000 0092             {
                 ; 0000 0093                 if (PINA .3)
0000fb 99cb      	SBIC 0x19,3
                 ; 0000 0094                     break;
0000fc c006      	RJMP _0x33
                 ; 0000 0095                 PORTC = SEG7_DNo[4];
0000fd d0f8      	RCALL SUBOPT_0x5
                 ; 0000 0096                 PORTD = DIGIT[1];
0000fe d104      	RCALL SUBOPT_0x7
                 ; 0000 0097                 delay_ms(4);
                 ; 0000 0098             }
0000ff 81e8      	LD   R30,Y
000100 5fef      	SUBI R30,-LOW(1)
000101 83e8      	ST   Y,R30
000102 cff5      	RJMP _0x32
                 _0x33:
                 ; 0000 0099 
                 ; 0000 009A             for (i = 0; i < 50; i++)
000103 e0e0      	LDI  R30,LOW(0)
000104 83e8      	ST   Y,R30
                 _0x36:
000105 81a8      	LD   R26,Y
000106 33a2      	CPI  R26,LOW(0x32)
000107 f450      	BRSH _0x37
                 ; 0000 009B             {
                 ; 0000 009C                 if (PINA .3)
000108 99cb      	SBIC 0x19,3
                 ; 0000 009D                     break;
000109 c008      	RJMP _0x37
                 ; 0000 009E                 PORTC = SEG7_DNo[3];
00010a d0dc      	RCALL SUBOPT_0x2
                 ; 0000 009F                 PORTD = DIGIT[1];
00010b d0f7      	RCALL SUBOPT_0x7
                 ; 0000 00A0                 delay_ms(4);
                 ; 0000 00A1 
                 ; 0000 00A2                 PORTC = SEG7_DNo[4];
00010c d0e9      	RCALL SUBOPT_0x5
                 ; 0000 00A3                 PORTD = DIGIT[2];
00010d d0fd      	RCALL SUBOPT_0x8
                 ; 0000 00A4                 delay_ms(4);
                 ; 0000 00A5             }
00010e 81e8      	LD   R30,Y
00010f 5fef      	SUBI R30,-LOW(1)
000110 83e8      	ST   Y,R30
000111 cff3      	RJMP _0x36
                 _0x37:
                 ; 0000 00A6 
                 ; 0000 00A7             for (i = 0; i < 45; i++)
000112 e0e0      	LDI  R30,LOW(0)
000113 83e8      	ST   Y,R30
                 _0x3A:
000114 81a8      	LD   R26,Y
000115 32ad      	CPI  R26,LOW(0x2D)
000116 f460      	BRSH _0x3B
                 ; 0000 00A8             {
                 ; 0000 00A9                 if (PINA .3)
000117 99cb      	SBIC 0x19,3
                 ; 0000 00AA                     break;
000118 c00a      	RJMP _0x3B
                 ; 0000 00AB                 PORTC = SEG7_DNo[2];
000119 d0bf      	RCALL SUBOPT_0x0
                 ; 0000 00AC                 PORTD = DIGIT[1];
00011a d0e8      	RCALL SUBOPT_0x7
                 ; 0000 00AD                 delay_ms(4);
                 ; 0000 00AE 
                 ; 0000 00AF                 PORTC = SEG7_DNo[3];
00011b d0cb      	RCALL SUBOPT_0x2
                 ; 0000 00B0                 PORTD = DIGIT[2];
00011c d0ee      	RCALL SUBOPT_0x8
                 ; 0000 00B1                 delay_ms(4);
                 ; 0000 00B2 
                 ; 0000 00B3                 PORTC = SEG7_DNo[4];
00011d d0d8      	RCALL SUBOPT_0x5
                 ; 0000 00B4                 PORTD = DIGIT[7];
00011e d0f4      	RCALL SUBOPT_0x9
                 ; 0000 00B5                 delay_ms(4);
                 ; 0000 00B6             }
00011f 81e8      	LD   R30,Y
000120 5fef      	SUBI R30,-LOW(1)
000121 83e8      	ST   Y,R30
000122 cff1      	RJMP _0x3A
                 _0x3B:
                 ; 0000 00B7 
                 ; 0000 00B8             for (i = 0; i < 40; i++)
000123 e0e0      	LDI  R30,LOW(0)
000124 83e8      	ST   Y,R30
                 _0x3E:
000125 81a8      	LD   R26,Y
000126 32a8      	CPI  R26,LOW(0x28)
000127 f470      	BRSH _0x3F
                 ; 0000 00B9             {
                 ; 0000 00BA                 if (PINA .3)
000128 99cb      	SBIC 0x19,3
                 ; 0000 00BB                     break;
000129 c00c      	RJMP _0x3F
                 ; 0000 00BC                 PORTC = SEG7_DNo[1];
00012a d0c1      	RCALL SUBOPT_0x3
                 ; 0000 00BD                 PORTD = DIGIT[1];
00012b d0d7      	RCALL SUBOPT_0x7
                 ; 0000 00BE                 delay_ms(4);
                 ; 0000 00BF 
                 ; 0000 00C0                 PORTC = SEG7_DNo[2];
00012c d0ac      	RCALL SUBOPT_0x0
                 ; 0000 00C1                 PORTD = DIGIT[2];
00012d d0dd      	RCALL SUBOPT_0x8
                 ; 0000 00C2                 delay_ms(4);
                 ; 0000 00C3 
                 ; 0000 00C4                 PORTC = SEG7_DNo[3];
00012e d0b8      	RCALL SUBOPT_0x2
                 ; 0000 00C5                 PORTD = DIGIT[7];
00012f d0e3      	RCALL SUBOPT_0x9
                 ; 0000 00C6                 delay_ms(4);
                 ; 0000 00C7 
                 ; 0000 00C8                 PORTC = SEG7_DNo[4];
000130 d0c5      	RCALL SUBOPT_0x5
                 ; 0000 00C9                 PORTD = DIGIT[3];
000131 d0e9      	RCALL SUBOPT_0xA
                 ; 0000 00CA                 delay_ms(4);
                 ; 0000 00CB             }
000132 81e8      	LD   R30,Y
000133 5fef      	SUBI R30,-LOW(1)
000134 83e8      	ST   Y,R30
000135 cfef      	RJMP _0x3E
                 _0x3F:
                 ; 0000 00CC 
                 ; 0000 00CD             for (i = 0; i < 40; i++)
000136 e0e0      	LDI  R30,LOW(0)
000137 83e8      	ST   Y,R30
                 _0x42:
000138 81a8      	LD   R26,Y
000139 32a8      	CPI  R26,LOW(0x28)
00013a f470      	BRSH _0x43
                 ; 0000 00CE             {
                 ; 0000 00CF                 if (PINA .3)
00013b 99cb      	SBIC 0x19,3
                 ; 0000 00D0                     break;
00013c c00c      	RJMP _0x43
                 ; 0000 00D1                 PORTC = SEG7_DNo[1];
00013d d0ae      	RCALL SUBOPT_0x3
                 ; 0000 00D2                 PORTD = DIGIT[2];
00013e d0cc      	RCALL SUBOPT_0x8
                 ; 0000 00D3                 delay_ms(4);
                 ; 0000 00D4 
                 ; 0000 00D5                 PORTC = SEG7_DNo[2];
00013f d099      	RCALL SUBOPT_0x0
                 ; 0000 00D6                 PORTD = DIGIT[7];
000140 d0d2      	RCALL SUBOPT_0x9
                 ; 0000 00D7                 delay_ms(4);
                 ; 0000 00D8 
                 ; 0000 00D9                 PORTC = SEG7_DNo[3];
000141 d0a5      	RCALL SUBOPT_0x2
                 ; 0000 00DA                 PORTD = DIGIT[3];
000142 d0d8      	RCALL SUBOPT_0xA
                 ; 0000 00DB                 delay_ms(4);
                 ; 0000 00DC 
                 ; 0000 00DD                 PORTC = SEG7_DNo[4];
000143 d0b2      	RCALL SUBOPT_0x5
                 ; 0000 00DE                 PORTD = DIGIT[6];
000144 d0de      	RCALL SUBOPT_0xB
                 ; 0000 00DF                 delay_ms(4);
                 ; 0000 00E0             }
000145 81e8      	LD   R30,Y
000146 5fef      	SUBI R30,-LOW(1)
000147 83e8      	ST   Y,R30
000148 cfef      	RJMP _0x42
                 _0x43:
                 ; 0000 00E1 
                 ; 0000 00E2             for (i = 0; i < 40; i++)
000149 e0e0      	LDI  R30,LOW(0)
00014a 83e8      	ST   Y,R30
                 _0x46:
00014b 81a8      	LD   R26,Y
00014c 32a8      	CPI  R26,LOW(0x28)
00014d f470      	BRSH _0x47
                 ; 0000 00E3             {
                 ; 0000 00E4                 if (PINA .3)
00014e 99cb      	SBIC 0x19,3
                 ; 0000 00E5                     break;
00014f c00c      	RJMP _0x47
                 ; 0000 00E6                 PORTC = SEG7_DNo[1];
000150 d09b      	RCALL SUBOPT_0x3
                 ; 0000 00E7                 PORTD = DIGIT[7];
000151 d0c1      	RCALL SUBOPT_0x9
                 ; 0000 00E8                 delay_ms(4);
                 ; 0000 00E9 
                 ; 0000 00EA                 PORTC = SEG7_DNo[2];
000152 d086      	RCALL SUBOPT_0x0
                 ; 0000 00EB                 PORTD = DIGIT[3];
000153 d0c7      	RCALL SUBOPT_0xA
                 ; 0000 00EC                 delay_ms(4);
                 ; 0000 00ED 
                 ; 0000 00EE                 PORTC = SEG7_DNo[3];
000154 d092      	RCALL SUBOPT_0x2
                 ; 0000 00EF                 PORTD = DIGIT[6];
000155 d0cd      	RCALL SUBOPT_0xB
                 ; 0000 00F0                 delay_ms(4);
                 ; 0000 00F1 
                 ; 0000 00F2                 PORTC = SEG7_DNo[4];
000156 d09f      	RCALL SUBOPT_0x5
                 ; 0000 00F3                 PORTD = DIGIT[8];
000157 d0d3      	RCALL SUBOPT_0xC
                 ; 0000 00F4                 delay_ms(4);
                 ; 0000 00F5             }
000158 81e8      	LD   R30,Y
000159 5fef      	SUBI R30,-LOW(1)
00015a 83e8      	ST   Y,R30
00015b cfef      	RJMP _0x46
                 _0x47:
                 ; 0000 00F6 
                 ; 0000 00F7             for (i = 0; i < 40; i++)
00015c e0e0      	LDI  R30,LOW(0)
00015d 83e8      	ST   Y,R30
                 _0x4A:
00015e 81a8      	LD   R26,Y
00015f 32a8      	CPI  R26,LOW(0x28)
000160 f470      	BRSH _0x4B
                 ; 0000 00F8             {
                 ; 0000 00F9                 if (PINA .3)
000161 99cb      	SBIC 0x19,3
                 ; 0000 00FA                     break;
000162 c00c      	RJMP _0x4B
                 ; 0000 00FB                 PORTC = SEG7_DNo[1];
000163 d088      	RCALL SUBOPT_0x3
                 ; 0000 00FC                 PORTD = DIGIT[3];
000164 d0b6      	RCALL SUBOPT_0xA
                 ; 0000 00FD                 delay_ms(4);
                 ; 0000 00FE 
                 ; 0000 00FF                 PORTC = SEG7_DNo[2];
000165 d073      	RCALL SUBOPT_0x0
                 ; 0000 0100                 PORTD = DIGIT[6];
000166 d0bc      	RCALL SUBOPT_0xB
                 ; 0000 0101                 delay_ms(4);
                 ; 0000 0102 
                 ; 0000 0103                 PORTC = SEG7_DNo[3];
000167 d07f      	RCALL SUBOPT_0x2
                 ; 0000 0104                 PORTD = DIGIT[8];
000168 d0c2      	RCALL SUBOPT_0xC
                 ; 0000 0105                 delay_ms(4);
                 ; 0000 0106 
                 ; 0000 0107                 PORTC = SEG7_DNo[4];
000169 d08c      	RCALL SUBOPT_0x5
                 ; 0000 0108                 PORTD = DIGIT[4];
00016a d0c8      	RCALL SUBOPT_0xD
                 ; 0000 0109                 delay_ms(4);
                 ; 0000 010A             }
00016b 81e8      	LD   R30,Y
00016c 5fef      	SUBI R30,-LOW(1)
00016d 83e8      	ST   Y,R30
00016e cfef      	RJMP _0x4A
                 _0x4B:
                 ; 0000 010B 
                 ; 0000 010C             for (i = 0; i < 40; i++)
00016f e0e0      	LDI  R30,LOW(0)
000170 83e8      	ST   Y,R30
                 _0x4E:
000171 81a8      	LD   R26,Y
000172 32a8      	CPI  R26,LOW(0x28)
000173 f470      	BRSH _0x4F
                 ; 0000 010D             {
                 ; 0000 010E                 if (PINA .3)
000174 99cb      	SBIC 0x19,3
                 ; 0000 010F                     break;
000175 c00c      	RJMP _0x4F
                 ; 0000 0110                 PORTC = SEG7_DNo[1];
000176 d075      	RCALL SUBOPT_0x3
                 ; 0000 0111                 PORTD = DIGIT[6];
000177 d0ab      	RCALL SUBOPT_0xB
                 ; 0000 0112                 delay_ms(4);
                 ; 0000 0113 
                 ; 0000 0114                 PORTC = SEG7_DNo[2];
000178 d060      	RCALL SUBOPT_0x0
                 ; 0000 0115                 PORTD = DIGIT[8];
000179 d0b1      	RCALL SUBOPT_0xC
                 ; 0000 0116                 delay_ms(4);
                 ; 0000 0117 
                 ; 0000 0118                 PORTC = SEG7_DNo[3];
00017a d06c      	RCALL SUBOPT_0x2
                 ; 0000 0119                 PORTD = DIGIT[4];
00017b d0b7      	RCALL SUBOPT_0xD
                 ; 0000 011A                 delay_ms(4);
                 ; 0000 011B 
                 ; 0000 011C                 PORTC = SEG7_DNo[4];
00017c d079      	RCALL SUBOPT_0x5
                 ; 0000 011D                 PORTD = DIGIT[3];
00017d d09d      	RCALL SUBOPT_0xA
                 ; 0000 011E                 delay_ms(4);
                 ; 0000 011F             }
00017e 81e8      	LD   R30,Y
00017f 5fef      	SUBI R30,-LOW(1)
000180 83e8      	ST   Y,R30
000181 cfef      	RJMP _0x4E
                 _0x4F:
                 ; 0000 0120 
                 ; 0000 0121             for (i = 0; i < 40; i++)
000182 e0e0      	LDI  R30,LOW(0)
000183 83e8      	ST   Y,R30
                 _0x52:
000184 81a8      	LD   R26,Y
000185 32a8      	CPI  R26,LOW(0x28)
000186 f470      	BRSH _0x53
                 ; 0000 0122             {
                 ; 0000 0123                 if (PINA .3)
000187 99cb      	SBIC 0x19,3
                 ; 0000 0124                     break;
000188 c00c      	RJMP _0x53
                 ; 0000 0125                 PORTC = SEG7_DNo[1];
000189 d062      	RCALL SUBOPT_0x3
                 ; 0000 0126                 PORTD = DIGIT[8];
00018a d0a0      	RCALL SUBOPT_0xC
                 ; 0000 0127                 delay_ms(4);
                 ; 0000 0128 
                 ; 0000 0129                 PORTC = SEG7_DNo[2];
00018b d04d      	RCALL SUBOPT_0x0
                 ; 0000 012A                 PORTD = DIGIT[4];
00018c d0a6      	RCALL SUBOPT_0xD
                 ; 0000 012B                 delay_ms(4);
                 ; 0000 012C 
                 ; 0000 012D                 PORTC = SEG7_DNo[3];
00018d d059      	RCALL SUBOPT_0x2
                 ; 0000 012E                 PORTD = DIGIT[3];
00018e d08c      	RCALL SUBOPT_0xA
                 ; 0000 012F                 delay_ms(4);
                 ; 0000 0130 
                 ; 0000 0131                 PORTC = SEG7_DNo[4];
00018f d066      	RCALL SUBOPT_0x5
                 ; 0000 0132                 PORTD = DIGIT[0];
000190 d0aa      	RCALL SUBOPT_0xE
                 ; 0000 0133                 delay_ms(4);
                 ; 0000 0134             }
000191 81e8      	LD   R30,Y
000192 5fef      	SUBI R30,-LOW(1)
000193 83e8      	ST   Y,R30
000194 cfef      	RJMP _0x52
                 _0x53:
                 ; 0000 0135 
                 ; 0000 0136             for (i = 0; i < 40; i++)
000195 e0e0      	LDI  R30,LOW(0)
000196 83e8      	ST   Y,R30
                 _0x56:
000197 81a8      	LD   R26,Y
000198 32a8      	CPI  R26,LOW(0x28)
000199 f470      	BRSH _0x57
                 ; 0000 0137             {
                 ; 0000 0138                 if (PINA .3)
00019a 99cb      	SBIC 0x19,3
                 ; 0000 0139                     break;
00019b c00c      	RJMP _0x57
                 ; 0000 013A                 PORTC = SEG7_DNo[1];
00019c d04f      	RCALL SUBOPT_0x3
                 ; 0000 013B                 PORTD = DIGIT[4];
00019d d095      	RCALL SUBOPT_0xD
                 ; 0000 013C                 delay_ms(4);
                 ; 0000 013D 
                 ; 0000 013E                 PORTC = SEG7_DNo[2];
00019e d03a      	RCALL SUBOPT_0x0
                 ; 0000 013F                 PORTD = DIGIT[3];
00019f d07b      	RCALL SUBOPT_0xA
                 ; 0000 0140                 delay_ms(4);
                 ; 0000 0141 
                 ; 0000 0142                 PORTC = SEG7_DNo[3];
0001a0 d046      	RCALL SUBOPT_0x2
                 ; 0000 0143                 PORTD = DIGIT[0];
0001a1 d099      	RCALL SUBOPT_0xE
                 ; 0000 0144                 delay_ms(4);
                 ; 0000 0145 
                 ; 0000 0146                 PORTC = SEG7_DNo[4];
0001a2 d053      	RCALL SUBOPT_0x5
                 ; 0000 0147                 PORTD = DIGIT[3];
0001a3 d077      	RCALL SUBOPT_0xA
                 ; 0000 0148                 delay_ms(4);
                 ; 0000 0149             }
0001a4 81e8      	LD   R30,Y
0001a5 5fef      	SUBI R30,-LOW(1)
0001a6 83e8      	ST   Y,R30
0001a7 cfef      	RJMP _0x56
                 _0x57:
                 ; 0000 014A 
                 ; 0000 014B             for (i = 0; i < 45; i++)
0001a8 e0e0      	LDI  R30,LOW(0)
0001a9 83e8      	ST   Y,R30
                 _0x5A:
0001aa 81a8      	LD   R26,Y
0001ab 32ad      	CPI  R26,LOW(0x2D)
0001ac f460      	BRSH _0x5B
                 ; 0000 014C             {
                 ; 0000 014D                 if (PINA .3)
0001ad 99cb      	SBIC 0x19,3
                 ; 0000 014E                     break;
0001ae c00a      	RJMP _0x5B
                 ; 0000 014F                 PORTC = SEG7_DNo[1];
0001af d03c      	RCALL SUBOPT_0x3
                 ; 0000 0150                 PORTD = DIGIT[3];
0001b0 d06a      	RCALL SUBOPT_0xA
                 ; 0000 0151                 delay_ms(4);
                 ; 0000 0152 
                 ; 0000 0153                 PORTC = SEG7_DNo[2];
0001b1 d027      	RCALL SUBOPT_0x0
                 ; 0000 0154                 PORTD = DIGIT[0];
0001b2 d088      	RCALL SUBOPT_0xE
                 ; 0000 0155                 delay_ms(4);
                 ; 0000 0156 
                 ; 0000 0157                 PORTC = SEG7_DNo[3];
0001b3 d033      	RCALL SUBOPT_0x2
                 ; 0000 0158                 PORTD = DIGIT[3];
0001b4 d066      	RCALL SUBOPT_0xA
                 ; 0000 0159                 delay_ms(4);
                 ; 0000 015A             }
0001b5 81e8      	LD   R30,Y
0001b6 5fef      	SUBI R30,-LOW(1)
0001b7 83e8      	ST   Y,R30
0001b8 cff1      	RJMP _0x5A
                 _0x5B:
                 ; 0000 015B 
                 ; 0000 015C             for (i = 0; i < 50; i++)
0001b9 e0e0      	LDI  R30,LOW(0)
0001ba 83e8      	ST   Y,R30
                 _0x5E:
0001bb 81a8      	LD   R26,Y
0001bc 33a2      	CPI  R26,LOW(0x32)
0001bd f450      	BRSH _0x5F
                 ; 0000 015D             {
                 ; 0000 015E                 if (PINA .3)
0001be 99cb      	SBIC 0x19,3
                 ; 0000 015F                     break;
0001bf c008      	RJMP _0x5F
                 ; 0000 0160                 PORTC = SEG7_DNo[1];
0001c0 d02b      	RCALL SUBOPT_0x3
                 ; 0000 0161                 PORTD = DIGIT[0];
0001c1 d079      	RCALL SUBOPT_0xE
                 ; 0000 0162                 delay_ms(4);
                 ; 0000 0163 
                 ; 0000 0164                 PORTC = SEG7_DNo[2];
0001c2 d016      	RCALL SUBOPT_0x0
                 ; 0000 0165                 PORTD = DIGIT[3];
0001c3 d057      	RCALL SUBOPT_0xA
                 ; 0000 0166                 delay_ms(4);
                 ; 0000 0167             }
0001c4 81e8      	LD   R30,Y
0001c5 5fef      	SUBI R30,-LOW(1)
0001c6 83e8      	ST   Y,R30
0001c7 cff3      	RJMP _0x5E
                 _0x5F:
                 ; 0000 0168 
                 ; 0000 0169             for (i = 0; i < 55; i++)
0001c8 e0e0      	LDI  R30,LOW(0)
0001c9 83e8      	ST   Y,R30
                 _0x62:
0001ca 81a8      	LD   R26,Y
0001cb 33a7      	CPI  R26,LOW(0x37)
0001cc f440      	BRSH _0x63
                 ; 0000 016A             {
                 ; 0000 016B                 if (PINA .3)
0001cd 99cb      	SBIC 0x19,3
                 ; 0000 016C                     break;
0001ce c006      	RJMP _0x63
                 ; 0000 016D                 PORTC = SEG7_DNo[1];
0001cf d01c      	RCALL SUBOPT_0x3
                 ; 0000 016E                 PORTD = DIGIT[3];
0001d0 d04a      	RCALL SUBOPT_0xA
                 ; 0000 016F                 delay_ms(4);
                 ; 0000 0170             }
0001d1 81e8      	LD   R30,Y
0001d2 5fef      	SUBI R30,-LOW(1)
0001d3 83e8      	ST   Y,R30
0001d4 cff5      	RJMP _0x62
                 _0x63:
                 ; 0000 0171         }
0001d5 9621      	ADIW R28,1
0001d6 cf1c      	RJMP _0x2E
                 _0x30:
                 ; 0000 0172     }
0001d7 ce82      	RJMP _0x3
                 ; 0000 0173 }
                 _0x65:
0001d8 cfff      	RJMP _0x65
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x0:
                +
0001d9 e6e0     +LDI R30 , LOW ( 2 * _SEG7_DNo + ( 2 ) )
0001da e0f0     +LDI R31 , HIGH ( 2 * _SEG7_DNo + ( 2 ) )
                 	__POINTW1FN _SEG7_DNo,2
0001db 9004      	LPM  R0,Z
0001dc ba05      	OUT  0x15,R0
0001dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
0001de e0f0      	LDI  R31,0
0001df 5aec      	SUBI R30,LOW(-_DIGIT*2)
0001e0 4fff      	SBCI R31,HIGH(-_DIGIT*2)
0001e1 9004      	LPM  R0,Z
0001e2 ba02      	OUT  0x12,R0
0001e3 e0a1      	LDI  R26,LOW(1)
0001e4 e0b0      	LDI  R27,0
0001e5 940c 0243 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x2:
                +
0001e7 e6e1     +LDI R30 , LOW ( 2 * _SEG7_DNo + ( 3 ) )
0001e8 e0f0     +LDI R31 , HIGH ( 2 * _SEG7_DNo + ( 3 ) )
                 	__POINTW1FN _SEG7_DNo,3
0001e9 9004      	LPM  R0,Z
0001ea ba05      	OUT  0x15,R0
0001eb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x3:
                +
0001ec e5ef     +LDI R30 , LOW ( 2 * _SEG7_DNo + ( 1 ) )
0001ed e0f0     +LDI R31 , HIGH ( 2 * _SEG7_DNo + ( 1 ) )
                 	__POINTW1FN _SEG7_DNo,1
0001ee 9004      	LPM  R0,Z
0001ef ba05      	OUT  0x15,R0
0001f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
0001f1 bbe2      	OUT  0x12,R30
0001f2 e0a2      	LDI  R26,LOW(2)
0001f3 e0b0      	LDI  R27,0
0001f4 940c 0243 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x5:
                +
0001f6 e6e2     +LDI R30 , LOW ( 2 * _SEG7_DNo + ( 4 ) )
0001f7 e0f0     +LDI R31 , HIGH ( 2 * _SEG7_DNo + ( 4 ) )
                 	__POINTW1FN _SEG7_DNo,4
0001f8 9004      	LPM  R0,Z
0001f9 ba05      	OUT  0x15,R0
0001fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x6:
0001fb 5aec      	SUBI R30,LOW(-_DIGIT*2)
0001fc 4fff      	SBCI R31,HIGH(-_DIGIT*2)
0001fd 9004      	LPM  R0,Z
0001fe ba02      	OUT  0x12,R0
0001ff e0a3      	LDI  R26,LOW(3)
000200 e0b0      	LDI  R27,0
000201 940c 0243 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x7:
                +
000203 e5e5     +LDI R30 , LOW ( 2 * _DIGIT + ( 1 ) )
000204 e0f0     +LDI R31 , HIGH ( 2 * _DIGIT + ( 1 ) )
                 	__POINTW1FN _DIGIT,1
000205 9004      	LPM  R0,Z
000206 ba02      	OUT  0x12,R0
000207 e0a4      	LDI  R26,LOW(4)
000208 e0b0      	LDI  R27,0
000209 940c 0243 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x8:
                +
00020b e5e6     +LDI R30 , LOW ( 2 * _DIGIT + ( 2 ) )
00020c e0f0     +LDI R31 , HIGH ( 2 * _DIGIT + ( 2 ) )
                 	__POINTW1FN _DIGIT,2
00020d 9004      	LPM  R0,Z
00020e ba02      	OUT  0x12,R0
00020f e0a4      	LDI  R26,LOW(4)
000210 e0b0      	LDI  R27,0
000211 940c 0243 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x9:
                +
000213 e5eb     +LDI R30 , LOW ( 2 * _DIGIT + ( 7 ) )
000214 e0f0     +LDI R31 , HIGH ( 2 * _DIGIT + ( 7 ) )
                 	__POINTW1FN _DIGIT,7
000215 9004      	LPM  R0,Z
000216 ba02      	OUT  0x12,R0
000217 e0a4      	LDI  R26,LOW(4)
000218 e0b0      	LDI  R27,0
000219 940c 0243 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:63 WORDS
                 SUBOPT_0xA:
                +
00021b e5e7     +LDI R30 , LOW ( 2 * _DIGIT + ( 3 ) )
00021c e0f0     +LDI R31 , HIGH ( 2 * _DIGIT + ( 3 ) )
                 	__POINTW1FN _DIGIT,3
00021d 9004      	LPM  R0,Z
00021e ba02      	OUT  0x12,R0
00021f e0a4      	LDI  R26,LOW(4)
000220 e0b0      	LDI  R27,0
000221 940c 0243 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xB:
                +
000223 e5ea     +LDI R30 , LOW ( 2 * _DIGIT + ( 6 ) )
000224 e0f0     +LDI R31 , HIGH ( 2 * _DIGIT + ( 6 ) )
                 	__POINTW1FN _DIGIT,6
000225 9004      	LPM  R0,Z
000226 ba02      	OUT  0x12,R0
000227 e0a4      	LDI  R26,LOW(4)
000228 e0b0      	LDI  R27,0
000229 940c 0243 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xC:
                +
00022b e5ec     +LDI R30 , LOW ( 2 * _DIGIT + ( 8 ) )
00022c e0f0     +LDI R31 , HIGH ( 2 * _DIGIT + ( 8 ) )
                 	__POINTW1FN _DIGIT,8
00022d 9004      	LPM  R0,Z
00022e ba02      	OUT  0x12,R0
00022f e0a4      	LDI  R26,LOW(4)
000230 e0b0      	LDI  R27,0
000231 940c 0243 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xD:
                +
000233 e5e8     +LDI R30 , LOW ( 2 * _DIGIT + ( 4 ) )
000234 e0f0     +LDI R31 , HIGH ( 2 * _DIGIT + ( 4 ) )
                 	__POINTW1FN _DIGIT,4
000235 9004      	LPM  R0,Z
000236 ba02      	OUT  0x12,R0
000237 e0a4      	LDI  R26,LOW(4)
000238 e0b0      	LDI  R27,0
000239 940c 0243 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xE:
00023b e5e4      	LDI  R30,LOW(_DIGIT*2)
00023c e0f0      	LDI  R31,HIGH(_DIGIT*2)
00023d 9004      	LPM  R0,Z
00023e ba02      	OUT  0x12,R0
00023f e0a4      	LDI  R26,LOW(4)
000240 e0b0      	LDI  R27,0
000241 940c 0243 	JMP  _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
000243 9610      	adiw r26,0
000244 f039      	breq __delay_ms1
                 __delay_ms0:
000245 95a8      	wdr
                +
000246 ed80     +LDI R24 , LOW ( 0x7D0 )
000247 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000248 9701     +SBIW R24 , 1
000249 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00024a 9711      	sbiw r26,1
00024b f7c9      	brne __delay_ms0
                 __delay_ms1:
00024c 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  28 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   8 r17:   8 r18:   0 r19:   0 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   6 r25:   2 r26:  52 r27:  14 r28:   5 r29:   1 r30: 139 r31:  39 
x  :   2 y  :  96 z  :  14 
Registers used: 14 out of 35 (40.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   4 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   1 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   2 brne  :   8 brpl  :   2 brsh  :  13 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   1 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   0 cpc   :   0 cpi   :  17 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  33 ld    :  28 ldd   :  22 ldi   :  99 
lds   :   0 lpm   :  28 lsl   :   0 lsr   :   0 mov   :   2 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  28 pop   :   0 push  :   0 rcall : 100 ret   :   5 
reti  :   0 rjmp  :  55 rol   :   0 ror   :   0 sbc   :   0 sbci  :   2 
sbi   :   0 sbic  :  24 sbis  :   0 sbiw  :  10 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  29 std   :  19 sts   :   0 sub   :   0 subi  :  19 swap  :   0 
tst   :   4 wdr   :   1 
Instructions used: 30 out of 116 (25.9%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00049a   1162     16   1178   16384   7.2%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 1 warnings
